using System;
using CleanItERP.DataModel;
using FluentAssertions;
using Xunit;

namespace CleanItERPTests.DataModel
{
    public class CustomerTest : ADbContextTest
    {

        [Fact]
        public void TestUserNavigationOfCustomer()
        {
            var user = EntityFactory.CreateUser();
            var customer = new Customer()
            {
                FirstName = "John",
                LastName = "Doe",
                MemberShipId = 1,
                User = user
            };

            using (var context = CreateContext())
            {
                context.Add(customer);
                context.SaveChanges();
            }

            user.Id.Should().BeAutoGeneratedId();
            customer.UserId.Should().Be(user.Id);
        }


        [Fact]
        public void TestOrderReverseNavigationOfCustomer()
        {
            var branch = EntityFactory.CreateBranch();
            var customer = EntityFactory.CreateCustomer();
            var employee = EntityFactory.CreateEmployee();

            var order = new Order()
            {
                Identifier = "TestOrder1",
                Branch = branch,
                Customer = customer,
                Clerk = employee,
                DateReceived = DateTime.Now,
                DateReturned = DateTime.Now + TimeSpan.FromDays(1)
            };

            using (var context = CreateContext())
            {
                context.Add(order);
                context.SaveChanges();
            }

            customer.Orders.Should().Contain(order);
        }

        [Fact]
        public void SavingWithoutFirstNameThrows()
        {
            var customer = EntityFactory.CreateCustomer();
            customer.FirstName = null;

            using (var context = CreateContext())
            {
                context.Add(customer);
                SavingContextShouldThrowNotNullConstrainedFailedException(context);
            }
        }

        [Fact]
        public void SavingWithoutLastNameThrows()
        {
            var customer = EntityFactory.CreateCustomer();
            customer.LastName = null;

            using (var context = CreateContext())
            {
                context.Add(customer);
                SavingContextShouldThrowNotNullConstrainedFailedException(context);
            }
        }

    }
}