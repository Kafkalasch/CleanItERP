using System;
using CleanItERP.Model;
using FluentAssertions;
using Xunit;

namespace CleanItERPTests.Model
{
    public class EmployeeTest : AModelTest
    {
        [Fact]
        public void TestUserNavigationOfEmployee()
        {
            var user = EntityFactory.CreateUser();
            var employee = new Employee()
            {
                FirstName = "John",
                LastName = "Doe",
                SocialSecurityNumber = 123456789,
                User = user
            };

            using (var context = CreateContext())
            {
                context.Add(employee);
                context.SaveChanges();
            }

            user.Id.Should().BeAutoGeneratedId();
            employee.UserId.Should().Be(user.Id);
        }

        [Fact]
        public void TestOrderReverseNavigationOfEmployee()
        {
            var branch = EntityFactory.CreateBranch();
            var customer = EntityFactory.CreateCustomer();
            var employee = EntityFactory.CreateEmployee();

            var order = new Order()
            {
                Identifier = "TestOrder1",
                Branch = branch,
                Customer = customer,
                Clerk = employee,
                DateReceived = DateTime.Now,
                DateReturned = DateTime.Now + TimeSpan.FromDays(1)
            };

            using (var context = CreateContext())
            {
                context.Add(order);
                context.SaveChanges();
            }

            employee.Orders.Should().Contain(order);
        }

        [Fact]
        public void SavingWithoutFirstNameThrows()
        {
            var employee = EntityFactory.CreateEmployee();
            employee.FirstName = null;

            using (var context = CreateContext())
            {
                context.Add(employee);
                SavingContextShouldThrowNotNullConstrainedFailedException(context);
            }
        }

        [Fact]
        public void SavingWithoutLastNameThrows()
        {
            var employee = EntityFactory.CreateEmployee();
            employee.LastName = null;

            using (var context = CreateContext())
            {
                context.Add(employee);
                SavingContextShouldThrowNotNullConstrainedFailedException(context);
            }
        }
    }
}