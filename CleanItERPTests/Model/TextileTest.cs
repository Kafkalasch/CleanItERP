using System.Data;
using System;
using CleanItERP.DataModel;
using FluentAssertions;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Xunit;

namespace CleanItERPTests.Model
{
    public class TextileTest : AModelTest
    {
        
        [Fact]
        public void TestTextileTypeNavigationOfTextile(){
            var type = EntityFactory.CreateTextileType();
            var state = EntityFactory.CreateTextileState();
            var order = EntityFactory.CreateOrder();

            var textile = new Textile()
            {
                Identifier = "J523",
                TextileType = type,
                TextileState = state,
                Order = order
            };

            using (var context = CreateContext())
            {
                context.Add(textile);
                context.SaveChanges();
            }

            type.Id.Should().BeAutoGeneratedId();
            textile.TextileTypeId.Should().Be(type.Id);
        }

        [Fact]
        public void TestTextileStateNavigationOfTextile(){
            var type = EntityFactory.CreateTextileType();
            var state = EntityFactory.CreateTextileState();
            var order = EntityFactory.CreateOrder();

            var textile = new Textile()
            {
                Identifier = "J523",
                TextileType = type,
                TextileState = state,
                Order = order
            };

            using (var context = CreateContext())
            {
                context.Add(textile);
                context.SaveChanges();
            }

            state.Id.Should().BeAutoGeneratedId();
            textile.TextileStateId.Should().Be(state.Id);
        }

        [Fact]
        public void TestOrderNavigationOfTextile(){
            var type = EntityFactory.CreateTextileType();
            var state = EntityFactory.CreateTextileState();
            var order = EntityFactory.CreateOrder();

            var textile = new Textile()
            {
                Identifier = "J523",
                TextileType = type,
                TextileState = state,
                Order = order
            };

            using (var context = CreateContext())
            {
                context.Add(textile);
                context.SaveChanges();
            }

            order.Id.Should().BeAutoGeneratedId();
            textile.OrderId.Should().Be(order.Id);
        }

        [Fact]
        public void SavingWithoutIdentifierThrows()
        {
            var textile = EntityFactory.CreateTextile();
            textile.Identifier = null;

            using (var context = CreateContext())
            {
                context.Add(textile);
                SavingContextShouldThrowNotNullConstrainedFailedException(context);
            }
        }

    }
}