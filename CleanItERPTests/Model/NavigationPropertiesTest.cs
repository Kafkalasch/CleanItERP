using System.Data;
using System;
using CleanItERP.Model;
using FluentAssertions;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Xunit;

namespace CleanItERPTests.Model
{
    public class NavigationPropertiesTest : IDisposable
    {

        private SqliteConnection Connection { get; }
        private DbContextOptions<CleanItERPContext> ContextOptions { get; }

        public NavigationPropertiesTest()
        {
            Connection = new SqliteConnection("DataSource=:memory:");
            Connection.Open();

            ContextOptions = new DbContextOptionsBuilder<CleanItERPContext>()
                .UseSqlite(Connection)
                .Options;

            using (var context = new CleanItERPContext(ContextOptions))
            {
                context.Database.EnsureCreated();
            }
        }
        public void Dispose()
        {
            Connection.Close();
        }

        [Fact]
        public void TestUserRoleNavigationOfUser()
        {
            var userRole = EntityFactory.CreateUserRole();
            var user = new User()
            {
                Name = "JohnDoe",
                UserRole = userRole
            };

            using (var context = CreateContext())
            {
                context.Add(user);
                context.SaveChanges();
            }

            userRole.Id.Should().BeAutoGeneratedId();
            user.UserRoleId.Should().Be(userRole.Id);
        }

        [Fact]
        public void TestUserNavigationOfEmployee()
        {
            var user = EntityFactory.CreateUser();
            var employee = new Employee()
            {
                FirstName = "John",
                LastName = "Doe",
                SocialSecurityNumber = 123456789,
                User = user
            };

            using (var context = CreateContext())
            {
                context.Add(employee);
                context.SaveChanges();
            }

            user.Id.Should().BeAutoGeneratedId();
            employee.UserId.Should().Be(user.Id);
        }

        [Fact]
        public void TestUserNavigationOfCustomer()
        {
            var user = EntityFactory.CreateUser();
            var customer = new Customer()
            {
                FirstName = "John",
                LastName = "Doe",
                MemberShipId = 1,
                User = user
            };

            using (var context = CreateContext())
            {
                context.Add(customer);
                context.SaveChanges();
            }

            user.Id.Should().BeAutoGeneratedId();
            customer.UserId.Should().Be(user.Id);
        }

        [Fact]
        public void TestBranchNavigationOfOrder()
        {
            var branch = EntityFactory.CreateBranch();
            var customer = EntityFactory.CreateCustomer();
            var employee = EntityFactory.CreateEmployee();

            var order = new Order()
            {
                Identifier = "TestOrder1",
                Branch = branch,
                Customer = customer,
                Clerk = employee,
                DateReceived = DateTime.Now,
                DateReturned = DateTime.Now + TimeSpan.FromDays(1)
            };

            using (var context = CreateContext())
            {
                context.Add(order);
                context.SaveChanges();
            }

            branch.Id.Should().BeAutoGeneratedId();
            order.BranchId.Should().Be(branch.Id);
        }

        [Fact]
        public void TestCustomerNavigationOfOrder()
        {
            var branch = EntityFactory.CreateBranch();
            var customer = EntityFactory.CreateCustomer();
            var employee = EntityFactory.CreateEmployee();

            var order = new Order()
            {
                Identifier = "TestOrder1",
                Branch = branch,
                Customer = customer,
                Clerk = employee,
                DateReceived = DateTime.Now,
                DateReturned = DateTime.Now + TimeSpan.FromDays(1)
            };

            using (var context = CreateContext())
            {
                context.Add(order);
                context.SaveChanges();
            }

            customer.Id.Should().BeAutoGeneratedId();
            order.CustomerId.Should().Be(customer.Id);
        }

        [Fact]
        public void TestClerkNavigationOfOrder()
        {
            var branch = EntityFactory.CreateBranch();
            var customer = EntityFactory.CreateCustomer();
            var employee = EntityFactory.CreateEmployee();

            var order = new Order()
            {
                Identifier = "TestOrder1",
                Branch = branch,
                Customer = customer,
                Clerk = employee,
                DateReceived = DateTime.Now,
                DateReturned = DateTime.Now + TimeSpan.FromDays(1)
            };

            using (var context = CreateContext())
            {
                context.Add(order);
                context.SaveChanges();
            }

            employee.Id.Should().BeAutoGeneratedId();
            order.ClerkId.Should().Be(employee.Id);
        }

        [Fact]
        public void TestTextileTypeNavigationOfTextile(){
            var type = EntityFactory.CreateTextileType();
            var state = EntityFactory.CreateTextileState();
            var order = EntityFactory.CreateOrder();

            var textile = new Textile()
            {
                Identifier = "J523",
                TextileType = type,
                TextileState = state,
                Order = order
            };

            using (var context = CreateContext())
            {
                context.Add(textile);
                context.SaveChanges();
            }

            type.Id.Should().BeAutoGeneratedId();
            textile.TextileTypeId.Should().Be(type.Id);
        }

        [Fact]
        public void TestTextileStateNavigationOfTextile(){
            var type = EntityFactory.CreateTextileType();
            var state = EntityFactory.CreateTextileState();
            var order = EntityFactory.CreateOrder();

            var textile = new Textile()
            {
                Identifier = "J523",
                TextileType = type,
                TextileState = state,
                Order = order
            };

            using (var context = CreateContext())
            {
                context.Add(textile);
                context.SaveChanges();
            }

            state.Id.Should().BeAutoGeneratedId();
            textile.TextileStateId.Should().Be(state.Id);
        }
        
        [Fact]
        public void TestOrderNavigationOfTextile(){
            var type = EntityFactory.CreateTextileType();
            var state = EntityFactory.CreateTextileState();
            var order = EntityFactory.CreateOrder();

            var textile = new Textile()
            {
                Identifier = "J523",
                TextileType = type,
                TextileState = state,
                Order = order
            };

            using (var context = CreateContext())
            {
                context.Add(textile);
                context.SaveChanges();
            }

            order.Id.Should().BeAutoGeneratedId();
            textile.OrderId.Should().Be(order.Id);
        }

        private CleanItERPContext CreateContext() => new CleanItERPContext(ContextOptions);



    }
}